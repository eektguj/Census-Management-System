/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import helpers.PdfFileChooser;
import helpers.Plotter;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import model.Country;
import model.GrowthRate;
import model.ModelMgr;
import model.PredictPopulation;

/**
 *
 * @author amir
 */
public class ExportData extends javax.swing.JPanel {

    /**
     * Creates new form ExportData
     */
    public ExportData() {
        initComponents();
        radio_export_population.setSelected(true);
        radio_export_populationActionPerformed(null);
        List<String> typeList = ModelMgr.getInstance().getMethodList();
        typeList.remove(typeList.indexOf(ModelMgr.ESTIMATES));
        combo_export_forecast_type.setModel(new DefaultComboBoxModel(typeList.toArray()));
        combo_export_forecast_country.setModel(ModelMgr.getInstance().getCuntriesComboModel());
        combo_export_population_country.setModel(ModelMgr.getInstance().getCuntriesComboModel());
        combo_export_forecast_type.setSelectedIndex(-1);
        combo_export_forecast_country.setSelectedIndex(-1);
        combo_export_population_country.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exportGroup = new javax.swing.ButtonGroup();
        radio_export_population = new javax.swing.JRadioButton();
        radio_export_forecast = new javax.swing.JRadioButton();
        panel_export_forecast = new javax.swing.JPanel();
        combo_export_forecast_type = new javax.swing.JComboBox();
        lbl_export_forecast_type = new javax.swing.JLabel();
        lbl_export_forecast_country = new javax.swing.JLabel();
        combo_export_forecast_country = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        txt_export_outputAddress = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        panel_export_population = new javax.swing.JPanel();
        combo_export_population_country = new javax.swing.JComboBox();
        lbl_export_population_country = new javax.swing.JLabel();
        combo_export_population_type = new javax.swing.JComboBox();
        lbl_export_population_type = new javax.swing.JLabel();

        exportGroup.add(radio_export_population);
        radio_export_population.setText("Country Population Chart");
        radio_export_population.setName("radio_population"); // NOI18N
        radio_export_population.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_export_populationActionPerformed(evt);
            }
        });

        exportGroup.add(radio_export_forecast);
        radio_export_forecast.setText("Forecast ");
        radio_export_forecast.setName("radio_forecast"); // NOI18N
        radio_export_forecast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_export_forecastActionPerformed(evt);
            }
        });

        panel_export_forecast.setBorder(javax.swing.BorderFactory.createTitledBorder("Forecast"));
        panel_export_forecast.setName("panel_forecast"); // NOI18N

        combo_export_forecast_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Men" , "Woemen" , "All" }));
        combo_export_forecast_type.setName("combo_country"); // NOI18N

        lbl_export_forecast_type.setText("Type:");

        lbl_export_forecast_country.setText("Country:");

        combo_export_forecast_country.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));
        combo_export_forecast_country.setName("combo_country"); // NOI18N

        javax.swing.GroupLayout panel_export_forecastLayout = new javax.swing.GroupLayout(panel_export_forecast);
        panel_export_forecast.setLayout(panel_export_forecastLayout);
        panel_export_forecastLayout.setHorizontalGroup(
            panel_export_forecastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_export_forecastLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_export_forecastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_export_forecast_country)
                    .addComponent(lbl_export_forecast_type))
                .addGap(18, 18, 18)
                .addGroup(panel_export_forecastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_export_forecast_country, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_export_forecast_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_export_forecastLayout.setVerticalGroup(
            panel_export_forecastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_export_forecastLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(panel_export_forecastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_export_forecast_country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_export_forecast_country))
                .addGap(46, 46, 46)
                .addGroup(panel_export_forecastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_export_forecast_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_export_forecast_type))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Output: ");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generate Output");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        panel_export_population.setBorder(javax.swing.BorderFactory.createTitledBorder("Country Poulation Chart"));
        panel_export_population.setName("panel_population"); // NOI18N

        combo_export_population_country.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));
        combo_export_population_country.setName("combo_country"); // NOI18N

        lbl_export_population_country.setText("Country:");

        combo_export_population_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Men" , "Woemen" , "All" }));
        combo_export_population_type.setName("combo_country"); // NOI18N

        lbl_export_population_type.setText("Type:");

        javax.swing.GroupLayout panel_export_populationLayout = new javax.swing.GroupLayout(panel_export_population);
        panel_export_population.setLayout(panel_export_populationLayout);
        panel_export_populationLayout.setHorizontalGroup(
            panel_export_populationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_export_populationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_export_populationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_export_populationLayout.createSequentialGroup()
                        .addComponent(lbl_export_population_country)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_export_populationLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbl_export_population_type)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(panel_export_populationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_export_population_country, 0, 165, Short.MAX_VALUE)
                    .addComponent(combo_export_population_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_export_populationLayout.setVerticalGroup(
            panel_export_populationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_export_populationLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(panel_export_populationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_export_population_country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_export_population_country))
                .addGap(47, 47, 47)
                .addGroup(panel_export_populationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_export_population_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_export_population_type))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radio_export_population)
                            .addComponent(panel_export_population, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radio_export_forecast)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(panel_export_forecast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_export_outputAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_export_population)
                    .addComponent(radio_export_forecast))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_export_forecast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_export_population, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_export_outputAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new PdfFileChooser(".","pdf");
        FileFilter ff = new FileFilter() {
 
            public String getDescription() {
                return "PDF Documents (*.pdf)";
            }
 
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".pdf");
                }
            }
        };
        chooser.addChoosableFileFilter(ff);
        chooser.setFileFilter(ff);
        
        int option = chooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            txt_export_outputAddress.setText(chooser.getSelectedFile().getAbsolutePath());
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void radio_export_forecastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_export_forecastActionPerformed
        // TODO add your handling code here:
        panel_export_forecast.setEnabled(true);
        combo_export_forecast_country.setEnabled(true);
        combo_export_forecast_type.setEnabled(true);
        lbl_export_forecast_country.setEnabled(true);
        lbl_export_forecast_type.setEnabled(true);
        
        panel_export_population.setEnabled(false);
        combo_export_population_country.setEnabled(false);
        combo_export_population_type.setEnabled(false);
        lbl_export_population_country.setEnabled(false);
        lbl_export_population_type.setEnabled(false);
    }//GEN-LAST:event_radio_export_forecastActionPerformed

    private void radio_export_populationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_export_populationActionPerformed
        // TODO add your handling code here:
        panel_export_forecast.setEnabled(false);
        combo_export_forecast_country.setEnabled(false);
        combo_export_forecast_type.setEnabled(false);
        lbl_export_forecast_country.setEnabled(false);
        lbl_export_forecast_type.setEnabled(false);
        
        panel_export_population.setEnabled(true);
        combo_export_population_country.setEnabled(true);
        combo_export_population_type.setEnabled(true);
        lbl_export_population_country.setEnabled(true);
        lbl_export_population_type.setEnabled(true);
    }//GEN-LAST:event_radio_export_populationActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(txt_export_outputAddress.getText() == null || txt_export_outputAddress.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select a file to save!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String outputPath = txt_export_outputAddress.getText();
        if(radio_export_population.isSelected()){
            if(combo_export_population_country.getSelectedIndex() == -1 || combo_export_population_type.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(this, "Fill all data please", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Country country = ModelMgr.getInstance().getCountry(combo_export_population_country.getSelectedItem().toString());
            System.err.println(country.countryName);
            if(country == null)
                return;
            ArrayList<Double> xList = new ArrayList<>();
            ArrayList<Double> yList = new ArrayList<>();
            List<PredictPopulation> PPList = country.getPredictForAllMenAndWomen(ModelMgr.ESTIMATES, combo_export_population_type.getSelectedIndex());
            sortByDate(PPList);
            for(PredictPopulation pp : PPList){
                xList.add((double)pp.predictYear);
                yList.add((double)pp.populationNumber);
            }
            String title = "Population of " + country.countryName + " for " + combo_export_population_type.getSelectedItem();
            Plotter.plot(title, "Year", "Population", xList, yList, outputPath);
            JOptionPane.showMessageDialog(this, "Done!", "Ok", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            if(combo_export_forecast_country.getSelectedIndex() == -1 || combo_export_forecast_type.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(this, "Fill all data please", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Country country = ModelMgr.getInstance().getCountry(combo_export_forecast_country.getSelectedItem().toString());
            if(country == null)
                return;
            ArrayList<Double> xList = new ArrayList<>();
            ArrayList<Double> yList = new ArrayList<>();
            List<PredictPopulation> PPList = country.getPredictForAllMenAndWomen(combo_export_forecast_type.getSelectedItem().toString(), 2);
            sortByDate(PPList);
            for(PredictPopulation pp : PPList){
                xList.add((double)pp.predictYear);
                yList.add((double)pp.populationNumber);
            }
            String title = "Population of " + country.countryName + " with method " + combo_export_forecast_type.getSelectedItem();
            Plotter.plot(title, "Year", "Population", xList, yList, outputPath);
            JOptionPane.showMessageDialog(this, "Done!", "Ok", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo_export_forecast_country;
    private javax.swing.JComboBox combo_export_forecast_type;
    private javax.swing.JComboBox combo_export_population_country;
    private javax.swing.JComboBox combo_export_population_type;
    private javax.swing.ButtonGroup exportGroup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbl_export_forecast_country;
    private javax.swing.JLabel lbl_export_forecast_type;
    private javax.swing.JLabel lbl_export_population_country;
    private javax.swing.JLabel lbl_export_population_type;
    private javax.swing.JPanel panel_export_forecast;
    private javax.swing.JPanel panel_export_population;
    private javax.swing.JRadioButton radio_export_forecast;
    private javax.swing.JRadioButton radio_export_population;
    private javax.swing.JTextField txt_export_outputAddress;
    // End of variables declaration//GEN-END:variables

    private void sortByDate(List<PredictPopulation> PPList) {
        Collections.sort(PPList, (PredictPopulation o1, PredictPopulation o2) -> Integer.compare(o1.predictYear,o2.predictYear));
    }
}
